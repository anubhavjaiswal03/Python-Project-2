Index: Recommender.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Book import Book\nfrom Show import Show\nimport timeit\n\n\nclass Recommender:\n    def __init__(self):\n        self.__books = []  # Stores all the Book Objects in a List\n        self.__shows = []  # Stores all the Show Objects in a List\n        self.__associations = {}  # Stores the relationships/associations.\n\n    def __str__(self):\n        pass\n\n    def loadAssociations(self):\n        # prompt for a file dialog\n        filename = \"Input Files/associated10.csv\"\n        with (open(filename, 'r') as file):\n            line = file.readline()\n            while line:\n                id_set = line.strip().split(',')\n                # Adding Association of the first id:\n                if id_set[0] in self.__associations.keys():\n                    inner_dictionary = self.__associations[id_set[0]]\n                    if id_set[1] in inner_dictionary.keys():\n                        inner_dictionary[id_set[1]] += 1\n                    else:\n                        inner_dictionary.update({id_set[1]: 1})\n                else:\n                    self.__associations.update({id_set[0]: {id_set[1]: 1}})\n\n                # Adding Association of the second id:\n                if id_set[1] in self.__associations.keys():\n                    inner_dictionary = self.__associations[id_set[1]]\n                    if id_set[0] in inner_dictionary.keys():\n                        inner_dictionary[id_set[0]] += 1\n                    else:\n                        inner_dictionary.update({id_set[0]: 1})\n                else:\n                    self.__associations.update({id_set[1]: {id_set[0]: 1}})\n                line = file.readline()\n\n        for (key, value) in self.__associations.items():\n            print(f\"{key} : {value}\")\n\n\nif __name__ == '__main__':\n    rec = Recommender()\n    execution_time = timeit.timeit(rec.loadAssociations, number=1)\n    print(\"Execution time:\", execution_time, \"seconds\")\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Recommender.py b/Recommender.py
--- a/Recommender.py	(revision 270be42ccb091674cc16de10841d46c78515c599)
+++ b/Recommender.py	(date 1714419579574)
@@ -1,12 +1,16 @@
+import tkinter.filedialog
+
 from Book import Book
 from Show import Show
 import timeit
+from tkinter import filedialog as fd
+import os
 
 
 class Recommender:
     def __init__(self):
-        self.__books = []  # Stores all the Book Objects in a List
-        self.__shows = []  # Stores all the Show Objects in a List
+        self.__books = {}  # Stores all the Book Objects with the book ID as the key and the value as the Book Object.
+        self.__shows = {}  # Stores all the Show Objects with the show ID as the key and the value as the Show Object.
         self.__associations = {}  # Stores the relationships/associations.
 
     def __str__(self):
@@ -14,6 +18,7 @@
 
     def loadAssociations(self):
         # prompt for a file dialog
+        tkinter.messagebox.file
         filename = "Input Files/associated10.csv"
         with (open(filename, 'r') as file):
             line = file.readline()
@@ -43,9 +48,34 @@
         for (key, value) in self.__associations.items():
             print(f"{key} : {value}")
 
+        # Counting all the associations, it should be 2x the number of lines in the associated****.csv class.
+        count = 0
+        for (o_keys, i_dict) in self.__associations.items():
+            for (i_key, i_values) in i_dict.items():
+                count += i_values
+        print(count)
+
+    def loadBooks(self):
+        book_filedialog = ""
+        book_filename = ""
+        while not os.path.exists(book_filename):
+            book_filename = fd.askopenfilename(initialdir=os.getcwd())
+            if not os.path.exists(book_filename):
+                print('\033[91;1m%s\033[0m file does not exist!' % book_filename)
+
+        with open(book_filename) as book_file:
+            line = book_file.readline()
+            while line:
+                book_object = Book(*line.strip().split(','))
+                self.__books[book_object.get_book_id()] = book_object
+                line = book_file.readline()
+
+        for book in self.__books.items():
+            print(book[0], book[1])
+
 
 if __name__ == '__main__':
     rec = Recommender()
-    execution_time = timeit.timeit(rec.loadAssociations, number=1)
-    print("Execution time:", execution_time, "seconds")
-
+    rec.loadBooks()
+    # execution_time = timeit.timeit(rec.loadAssociations, number=1)
+    # print("Execution time:", execution_time, "seconds")
